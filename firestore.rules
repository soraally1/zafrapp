rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // General read rule for all collections
    match /{collection}/{docId} {
      allow read: if request.auth != null;
    }

    // Users collection
    match /users/{userId} {

      allow create: if request.auth.uid == userId
                    && request.resource.data.keys().hasAll(['name', 'email', 'role', 'createdAt'])
                    && request.resource.data.keys().size() == 4
                    && request.resource.data.name is string
                    && request.resource.data.email is string
                    && request.resource.data.role is string
                    && request.resource.data.createdAt is string
                    && request.resource.data.role in ['hr-keuangan', 'karyawan', 'umkm-amil'];


      // A user can read their own data; HR can read any user's data.
      allow get: if request.auth.uid == userId 
                 || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'hr-keuangan';

      // A user can update their own document; HR can update any.
      allow update: if request.auth.uid == userId 
                    || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'hr-keuangan';

      // Only HR can delete a user.
      allow delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'hr-keuangan';
    }

    // Mitra (UMKM) collection
    match /mitra/{mitraId} {
      // A user can create their own mitra document if their role is 'umkm-amil'.
      allow create: if request.auth.uid == mitraId
                    && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'umkm-amil'
                    && request.resource.data.keys().hasAll(['userId', 'namaMitra', 'alamatMitra', 'detailBisnis', 'jenisUsaha', 'createdAt'])
                    && request.resource.data.userId == request.auth.uid;

      // A user can read their own mitra data; HR can read any.
      allow get: if request.auth.uid == mitraId 
                 || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'hr-keuangan';

      // A user can update their own mitra data; HR can update any.
      allow update: if request.auth.uid == mitraId 
                    || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'hr-keuangan';

      // Only HR can delete a mitra document.
      allow delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'hr-keuangan';
    }

    // Payrolls collection (consolidated)
    match /payrolls/{payrollId} {
      // HR-Keuangan can read all payrolls
      allow get, list, read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'hr-keuangan';
      // Authenticated users can read their own payroll
      allow get, list, read: if request.auth != null && resource.data.userId == request.auth.uid;
      // HR-Keuangan can create/update/delete payrolls
      allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'hr-keuangan';
     // Karyawan can update their own payroll (e.g., mark zakat as paid)
      allow update: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Transaction reports
    match /transactionReports/{reportId} {
      // 'umkm-amil' and 'hr-keuangan' can create transactions.
      allow create: if request.auth != null 
                    && exists(/databases/$(database)/documents/users/$(request.auth.uid))
                    && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['umkm-amil', 'hr-keuangan'];
      // Any authenticated user can read reports.
      allow read: if request.auth != null;
      // HR-Keuangan can delete reports.
      allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'hr-keuangan';
      // Allow updates based on role.
      allow update: if
        // HR-Keuangan can update any field.
        (request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'hr-keuangan') ||
        // UMKM-Amil can update specific verification fields on their own transactions.
        (request.auth != null &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'umkm-amil' &&
         request.auth.uid == resource.data.userId &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['shariaStatus', 'aiStatus', 'aiExplanation']));
    }

    // Activities collection
    match /activities/{activityId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if false;
    }

    // Tasks collection
    match /tasks/{taskId} {
      allow create, read: if request.auth != null;
      allow update, delete: if false;
    }

    // Stats collection
    match /stats/{statId} {
      allow read: if request.auth != null;
      allow write: if false;
    }

    // Upcoming collection
    match /upcoming/{upcomingId} {
      allow read: if request.auth != null;
      allow write: if false;
    }

    // Reports collection
    match /reports/{reportId} {
      allow read: if request.auth != null;
      allow write: if false;
    }
  }
}
